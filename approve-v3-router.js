const { ethers } = require("ethers");
require('dotenv').config();

const provider = new ethers.providers.JsonRpcProvider(
    "https://rpc.hyperliquid-testnet.xyz/evm"
);

const SWAP_ROUTER = "0x51c5958FFb3e326F8d7AA945948159f1FF27e14A";
const WETH_ADDRESS = "0xADcb2f358Eae6492F61A5f87eb8893d09391d160".toLowerCase();

const erc20ABI = [
    "function balanceOf(address) view returns (uint256)",
    "function allowance(address owner, address spender) view returns (uint256)",
    "function approve(address spender, uint256 amount) returns (bool)",
    "function symbol() view returns (string)"
];

async function approveV3Router() {
    console.log("üîß HyperSwap V3 RouterÊâøË™ç\n");
    
    if (!process.env.PRIVATE_KEY) {
        console.error("‚ùå PRIVATE_KEY„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
        return;
    }
    
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    console.log(`„Ç¶„Ç©„É¨„ÉÉ„Éà: ${wallet.address}`);
    console.log(`V3 Router: ${SWAP_ROUTER}\n`);
    
    const wethContract = new ethers.Contract(WETH_ADDRESS, erc20ABI, wallet);
    
    try {
        // ÁèæÂú®„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
        const [balance, allowance, symbol] = await Promise.all([
            wethContract.balanceOf(wallet.address),
            wethContract.allowance(wallet.address, SWAP_ROUTER),
            wethContract.symbol()
        ]);
        
        console.log("üìä ÁèæÂú®„ÅÆÁä∂ÊÖã:");
        console.log(`   ${symbol}ÊÆãÈ´ò: ${ethers.utils.formatEther(balance)}`);
        console.log(`   V3 RouterÊâøË™ç: ${ethers.utils.formatEther(allowance)}`);
        
        if (allowance.gt(ethers.utils.parseEther("0.001"))) {
            console.log("   ‚úÖ Êó¢„Å´ÂçÅÂàÜ„Å™ÊâøË™ç„Åå„ÅÇ„Çä„Åæ„Åô\n");
        } else {
            console.log("   ‚ùå V3 RouterÊâøË™ç„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô\n");
            
            // ÁÑ°Âà∂ÈôêÊâøË™ç
            console.log("üí∏ V3 RouterÊâøË™çÂÆüË°å:");
            const maxUint256 = ethers.constants.MaxUint256;
            
            const approveTx = await wethContract.approve(SWAP_ROUTER, maxUint256, {
                gasLimit: 100000,
                gasPrice: ethers.utils.parseUnits("2", "gwei")
            });
            
            console.log(`ÊâøË™ç„Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥: ${approveTx.hash}`);
            console.log(`ÂæÖÊ©ü‰∏≠...`);
            
            const receipt = await approveTx.wait();
            
            if (receipt.status === 1) {
                console.log(`‚úÖ ÊâøË™çÊàêÂäü!`);
                console.log(`„Ç¨„Çπ‰ΩøÁî®Èáè: ${receipt.gasUsed.toString()}`);
            } else {
                console.log(`‚ùå ÊâøË™çÂ§±Êïó`);
                return;
            }
        }
        
        // V3„Çπ„ÉØ„ÉÉ„ÉóÂÜç„ÉÜ„Çπ„Éà
        console.log("üîÑ V3„Çπ„ÉØ„ÉÉ„ÉóÂÜç„ÉÜ„Çπ„Éà:");
        const { exec } = require('child_process');
        exec('node test-official-hyperswap-v3.js', (error, stdout, stderr) => {
            if (error) {
                console.error(`ÂÆüË°å„Ç®„É©„Éº: ${error}`);
                return;
            }
            console.log(stdout);
            if (stderr) {
                console.error(`„Ç®„É©„ÉºÂá∫Âäõ: ${stderr}`);
            }
        });
        
    } catch (error) {
        console.error("‚ùå „Ç®„É©„Éº:", error.message);
    }
}

if (require.main === module) {
    approveV3Router().catch(console.error);
}