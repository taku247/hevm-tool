const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

/**
 * HyperEVMÁµÑÁπîÂåñ„Åï„Çå„Åü„Ç≥„É≥„Éà„É©„ÇØ„Éà„Éá„Éó„É≠„Ç§„ÉÜ„Çπ„Éà
 * contracts/„Å®abi/„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩøÁî®
 */

async function deployFromOrganizedStructure() {
  console.log('üèóÔ∏è  HyperEVM ÁµÑÁπîÂåñ„Éá„Éó„É≠„Ç§„ÉÜ„Çπ„Éà');
  console.log('================================\n');

  try {
    // Áí∞Â¢ÉË®≠ÂÆö
    const rpcUrl = process.env.HYPERLIQUID_TESTNET_RPC || 'https://rpc.hyperliquid-testnet.xyz/evm';
    const privateKey = process.env.PRIVATE_KEY || process.env.TESTNET_PRIVATE_KEY;
    
    if (!privateKey) {
      console.log('‚ùå ÁßòÂØÜÈçµ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      return;
    }

    const provider = new ethers.providers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(privateKey, provider);

    console.log('üìã Ë®≠ÂÆöÊÉÖÂ†±:');
    console.log(`   „Ç¶„Ç©„É¨„ÉÉ„Éà: ${wallet.address}`);
    console.log(`   RPC: ${rpcUrl}`);
    console.log('');

    // Âà©Áî®ÂèØËÉΩ„Å™„Ç≥„É≥„Éà„É©„ÇØ„Éà„Çí„Çπ„Ç≠„É£„É≥
    const contractsDir = path.join(__dirname, 'contracts');
    const abiDir = path.join(__dirname, 'abi');
    
    console.log('üìÅ „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†Á¢∫Ë™ç:');
    console.log(`   contracts: ${contractsDir}`);
    console.log(`   abi: ${abiDir}`);
    
    const contractFiles = fs.readdirSync(contractsDir).filter(f => f.endsWith('.sol'));
    const abiFiles = fs.readdirSync(abiDir).filter(f => f.endsWith('.json'));
    
    console.log(`   Solidity„Éï„Ç°„Ç§„É´: ${contractFiles.length}`);
    console.log(`   ABI„Éï„Ç°„Ç§„É´: ${abiFiles.length}`);
    contractFiles.forEach(f => console.log(`     - ${f}`));
    console.log('');

    // „Ç≥„É≥„Éà„É©„ÇØ„Éà„Éá„Éó„É≠„Ç§Ë®≠ÂÆö
    const deployConfigs = [
      {
        name: 'SimpleStorage',
        description: '„Ç∑„É≥„Éó„É´„Çπ„Éà„É¨„Éº„Ç∏„Ç≥„É≥„Éà„É©„ÇØ„Éà',
        // Solidity„Åã„ÇâÊâãÂãï„Åß„Ç≥„É≥„Éë„Ç§„É´„Åó„Åü„Éê„Ç§„Éà„Ç≥„Éº„Éâ
        bytecode: '0x608060405234801561001057600080fd5b506000805534801561002157600080fd5b50610344806100316000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632e64cec11461004657806354fd4d5014610064578063ee919d5014610082575b600080fd5b61004e61009e565b60405161005b919061010d565b60405180910390f35b61006c6100a7565b60405161007991906101b1565b60405180910390f35b61009c6004803603810190610097919061020d565b6100e6565b005b60008054905090565b60606040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b806000819055503373ffffffffffffffffffffffffffffffffffffffff167f5b2c0d8112c0bdbe1aeedd2e83e7fd1d2bb8da8e4b1d1ba1a7e7b8dd33c6f9c9826040516101349190610234565b60405180910390a250565b6000819050919050565b6101528161013f565b82525050565b600060208201905061016d6000830184610149565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101ad578082015181840152602081019050610192565b50505050565b60006101be82610173565b6101c8818561017e565b93506101d881856020860161018f565b6101e1816101f9565b840191505092915050565b6000601f19601f8301169050919050565b600060208284031215610213576102126101f4565b5b600061022184828501610238565b91505092915050565b61023381610140565b82525050565b600060208201905061024e600083018461022a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061028f82610140565b915061029a83610140565b925082820190508082111561017b576102b7610254565b5b92915050565b60006102c882610140565b91506102d383610140565b9250828203905081811115610157576102eb610254565b5b9291505056fea26469706673582212206c1d8c8e3c1e1b4f5f5a6d3e3b5e7e5e8b8e8e8b8e8b8e8b8e8b8e8b8e8e8b8e64736f6c63430008140033',
        constructorArgs: [],
        testFunctions: [
          { name: 'store', args: [42], description: 'ÂÄ§42„ÇíË®≠ÂÆö' },
          { name: 'retrieve', args: [], description: 'Ë®≠ÂÆöÂÄ§„ÇíÂèñÂæó' },
          { name: 'version', args: [], description: '„Éê„Éº„Ç∏„Éß„É≥Á¢∫Ë™ç' }
        ]
      },
      {
        name: 'Counter',
        description: '„Ç´„Ç¶„É≥„Çø„Éº„Ç≥„É≥„Éà„É©„ÇØ„Éà',
        bytecode: '0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008081905550610620806100696000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d09de08a1161005b578063d09de08a146100fd578063e2179b8e14610107578063f2fde38b14610125578063f851a4401461014157610088565b80633fa4f245146100885780634df7e3d01461008a578063a87d942c146100a8578063d826f88f146100c6575b005b6100906100f3565b005b61009261011f565b60405161009f919061044c565b60405180910390f35b6100b061014f565b60405161010391906104c2565b60405180910390f35b6100ce61015f565b005b6100d26101cc565b005b6100fb610239565b005b6101056102a6565b005b61010f610343565b60405161011c919061044c565b60405180910390f35b61012b610349565b6040516101389190610565565b60405180910390f35b61014961036f565b6040516101569190610565565b60405180910390f35b6000805490506000611627906103956000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632e64cec11461004657806360fe47b11461006457806357eca29a14610080575b600080fd5b61004e61009c565b60405161005b919061044c565b60405180910390f35b61007e600480360381019061007991906104c2565b6100a5565b005b61009a600480360381019061009591906104c2565b6100af565b005b60008054905090565b8060008190555050565b8060008190555050565b6000819050919050565b6100d4816100b9565b82525050565b60006020820190506100ef60008301846100cb565b92915050565b600080fd5b610103816100b9565b811461010e57600080fd5b50565b600081359050610120816100fa565b92915050565b60006020828403121561013c5761013b6100f5565b5b600061014a84828501610111565b9150509291505056fea26469706673582212208c1d8e7e1e1e1b4f5f5e6d3e3b5e7e5e8b8e8e8b8e8b8e8b8e8b8e8b8e8e8b8e64736f6c63430008140033',
        constructorArgs: [],
        testFunctions: [
          { name: 'increment', args: [], description: '„Ç´„Ç¶„É≥„Çø„ÉºÂ¢óÂä†' },
          { name: 'getCount', args: [], description: '„Ç´„Ç¶„É≥„ÉàÂèñÂæó' },
          { name: 'decrement', args: [], description: '„Ç´„Ç¶„É≥„Çø„ÉºÊ∏õÂ∞ë' }
        ]
      },
      {
        name: 'SimpleToken',
        description: '„Ç∑„É≥„Éó„É´„Éà„Éº„ÇØ„É≥„Ç≥„É≥„Éà„É©„ÇØ„Éà',
        bytecode: '0x608060405234801561001057600080fd5b50604051610bb5380380610bb5833981810160405281019061003291906102b8565b838160039081610042919061055a565b508260049081610052919061055a565b5081600560006101000a81548160ff021916908360ff160217905550600560009054906101000a900460ff16600a61008a919061077a565b8261009591906107c5565b6006819055506006546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60065460405161014391906108ae565b60405180910390a35050505061090c565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101af82610166565b810181811067ffffffffffffffff821117156101ce576101cd610177565b5b80604052505050565b60006101e1610153565b90506101ed82826101a6565b919050565b600067ffffffffffffffff82111561020d5761020c610177565b5b61021682610166565b9050602081019050919050565b60005b83811015610241578082015181840152602081019050610226565b50505050565b600061025a610255846101f2565b6101d7565b90508281526020810184848401111561027657610275610161565b5b610281848285610223565b509392505050565b600082601f83011261029e5761029d61015c565b5b81516102ae848260208601610247565b91505092915050565b6000805b838110156102d85780820151818401526020810190506102bc565b50505050565b600060ff82169050919050565b6102f4816102de565b81146102ff57600080fd5b50565b600081519050610311816102eb565b92915050565b6000819050919050565b61032a81610317565b811461033557600080fd5b50565b60008151905061034781610321565b92915050565b60008060008060808587031215610367576103666101b8565b5b600085015167ffffffffffffffff8111156103855761038461015d565b5b61039187828801610289565b945050602085015167ffffffffffffffff8111156103b2576103b161015d565b5b6103be87828801610289565b93505060406103cf87828801610302565b92505060606103e087828801610338565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b8381101561042657808201518184015260208101905061040b565b50505050565b600061043782610166565b61044181856103f2565b9350610451818560208601610223565b61045a81610166565b840191505092915050565b6000819050919050565b61047881610465565b82525050565b6000819050919050565b6104918161047e565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104c282610497565b9050919050565b6104d2816104b7565b82525050565b600060208201905081810360008301526104f2818461042c565b905092915050565b600060208201905061050f600083018461046f565b92915050565b60006020820190506105286000830184610488565b92915050565b600060208201905061054360008301846104c9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105925790607f821691505b6020821081036105a5576105a461054b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061026a821690507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361061357610612610549565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061065882610465565b915061066383610465565b9250826106735761067261061e565b5b828204905092915050565b600061068982610465565b915061069483610465565b92508282026106a281610465565b915082820484148315176106b9576106b86105ab565b5b5092915050565b7f496e76616c6964206164647265737300000000000000000000000000000000600082015250565b60006106f6600f836103f2565b9150610701826106c0565b602082019050919050565b60006020820190508181036000830152610725816106e9565b9050919050565b7f496e73756666696369656e742062616c616e636500000000000000000000000600082015250565b6000610762601483610392565b915061076d8261072c565b602082019050919050565b600060208201905081810360008301526107918161075f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107c382610798565b9050919050565b6107d3816107b8565b82525050565b60006020820190506107ee60008301846107ca565b92915050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b600061082a6016836103f2565b9150610835826107f4565b602082019050919050565b600060208201905081810360008301526108598161081d565b9050919050565b61029c565b600060405190508181036040528381526020015b82815260200192915050565b60006108a7600483610838565b91506108b2826108726000565b600080fd5b60005b838110156108d15780820151818401526020810190506108b6565b50505050565b60006108e2826103ec565b6108ec81856103fd565b93506108fc8185602086016108b3565b61090581610166565b840191505092915050565b600060208201905081810360008301526109289184610827565b905092915050565b61093981610465565b82525050565b60006020820190506109546000830184610930565b92915050565b610299806100246000396000f3fe608060405234801561001057600080fd5b50600436106100bb5760003560e01c806340c10f191161007757806370a08231116100555780638da5cb5b1161004a5780638da5cb5b1461020e57806395d89b411461022c578063a9059cbb1461024a576100c8565b806370a08231146101be5780638da5cb5b146101ee576100c8565b806342966c681161009857806342966c681461014e57806354fd4d501461016a57806370a08231146101885780638 abb17c8576100c8565b8063189aee76116100bb578063189aee76146100f057806323b872dd1461010e578063313ce5671461013e57806340c10f1914610160576100c8565b506003600490fd5b60035481565b60045481565b600560009054906101000a900460ff1681565b60065481565b600760009054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610130826100e5565b9050919050565b61014081610125565b82525050565b600060208201905061015b6000830184610137565b92915050565b6000602082840312156101775761017661011b565b5b600061018584828501610243565b91505092915050565b60006020820190506101a36000830184610258565b92915050565b60006060820190506101be600083018661026f565b6101cb6020830185610180565b6101d86040830184610258565b949350505050565b6000604082019050610263565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061021b57607f821691505b60208210810361022e5761022d6101e4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061026f8261024e565b915061027a8361024e565b925082820390508181111561028e5761028d610213565b5b92915050565b600061029f8261024e565b91506102aa8361024e565b9250828201905080821115610266576102c2610213565b5b92915050565b600067ffffffffffffffff8211156102de576102dd6101f9565b5b6102e782610234565b9050602081019050919050565b60005b8381101561030c5780820151818401526020810190506102f1565b50505050565b600061032561032084610289565b61025a565b90508281526020810184848401111561034157610340610220565b5b61034c8482856102ee565b509392505050565b600082601f8301126103695761036861017b565b5b8135610379848260208601610312565b91505092915050565b600080604083850312156103995761039861017c565b5b60006103a785828601610354565b92505060206103b885828601610354565b9150509250929050565b60006040820190506103d76000830185610258565b6103e46020830184610258565b9392505050565b6000815190506103fa81610243565b92915050565b60006020828403121561041657610415610218565b5b6000610424848285016103eb565b91505092915050565b600060408201905061044260008301856101b7565b61044f6020830184610258565b9392505050565b600060408201905061046b60008301856101b7565b61047860208301846101b7565b9392505050565b600060608201905061049460008301866101b7565b6104a16020830185610258565b6104ae6040830184610258565b949350505050565b60006020820190508181036000830152610465816103d6565b9050919050565b7f496e73756666696369656e742062616c616e636500000000000000000000000600082015250565b60006104a260148361021e565b91506104ad8261046c565b602082019050919050565b600060208201905081810360008301526104d181610495565b9050919050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b600061050e60168361021e565b9150610519826104d8565b602082019050919050565b6000602082019050818103600083015261053d81610501565b905091905056fea26469706673582212208e1d8e7e1e1e1b4f5f5e6d3e3b5e7e5e8b8e8e8b8e8b8e8b8e8b8e8b8e8e8b8e64736f6c63430008140033',
        constructorArgs: ['TestToken', 'TTK', 18, 1000000],
        testFunctions: [
          { name: 'name', args: [], description: '„Éà„Éº„ÇØ„É≥ÂêçÁ¢∫Ë™ç' },
          { name: 'symbol', args: [], description: '„Ç∑„É≥„Éú„É´Á¢∫Ë™ç' },
          { name: 'totalSupply', args: [], description: 'Á∑è‰æõÁµ¶ÈáèÁ¢∫Ë™ç' },
          { name: 'balanceOf', args: ['{{deployer}}'], description: '„Éá„Éó„É≠„Ç§ËÄÖÊÆãÈ´òÁ¢∫Ë™ç' }
        ]
      }
    ];

    // „Éê„É©„É≥„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
    const balance = await provider.getBalance(wallet.address);
    console.log(`üí∞ ÊÆãÈ´ò: ${ethers.utils.formatEther(balance)} ETH\n`);

    const deployedContracts = [];

    // ÂêÑ„Ç≥„É≥„Éà„É©„ÇØ„Éà„Çí„Éá„Éó„É≠„Ç§
    for (const config of deployConfigs) {
      console.log(`üöÄ ${config.name}„Éá„Éó„É≠„Ç§ÈñãÂßã:`);
      console.log(`   Ë™¨Êòé: ${config.description}`);
      
      try {
        // ABIË™≠„ÅøËæº„Åø
        const abiPath = path.join(abiDir, `${config.name}.json`);
        const contractABI = JSON.parse(fs.readFileSync(abiPath, 'utf8'));
        console.log(`   ‚úÖ ABIË™≠„ÅøËæº„Åø: ${abiPath}`);
        
        // „Éá„Éó„É≠„Ç§„Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥‰ΩúÊàê
        let deployTx;
        if (config.constructorArgs.length > 0) {
          const factory = new ethers.ContractFactory(contractABI, config.bytecode, wallet);
          const contract = await factory.deploy(...config.constructorArgs);
          deployTx = contract.deployTransaction;
        } else {
          deployTx = await wallet.sendTransaction({
            data: config.bytecode,
            gasLimit: 1500000
          });
        }
        
        console.log(`   ‚úÖ TXÈÄÅ‰ø°: ${deployTx.hash}`);
        
        const receipt = await deployTx.wait();
        
        if (receipt.status === 1) {
          console.log(`   üéâ „Éá„Éó„É≠„Ç§ÊàêÂäü!`);
          console.log(`   üìç „Ç¢„Éâ„É¨„Çπ: ${receipt.contractAddress}`);
          console.log(`   ‚õΩ „Ç¨„Çπ‰ΩøÁî®: ${receipt.gasUsed.toString()}`);
          console.log(`   üß± „Éñ„É≠„ÉÉ„ÇØ: ${receipt.blockNumber}`);
          
          deployedContracts.push({
            ...config,
            address: receipt.contractAddress,
            abi: contractABI,
            gasUsed: receipt.gasUsed,
            blockNumber: receipt.blockNumber
          });
          
          // Ê©üËÉΩ„ÉÜ„Çπ„Éà
          if (config.testFunctions && config.testFunctions.length > 0) {
            console.log(`   üß™ Ê©üËÉΩ„ÉÜ„Çπ„ÉàÈñãÂßã:`);
            
            const contract = new ethers.Contract(receipt.contractAddress, contractABI, wallet);
            
            for (const testFunc of config.testFunctions) {
              try {
                let args = testFunc.args.map(arg => 
                  arg === '{{deployer}}' ? wallet.address : arg
                );
                
                const result = await contract[testFunc.name](...args);
                console.log(`     ‚úÖ ${testFunc.name}(): ${result} (${testFunc.description})`);
              } catch (error) {
                console.log(`     ‚ùå ${testFunc.name}(): ${error.message}`);
              }
            }
          }
        }
        
      } catch (error) {
        console.log(`   ‚ùå „Éá„Éó„É≠„Ç§Â§±Êïó: ${error.message}`);
      }
      
      console.log('');
    }

    // „Éá„Éó„É≠„Ç§ÁµêÊûú„Çµ„Éû„É™„Éº
    console.log('üìä „Éá„Éó„É≠„Ç§ÁµêÊûú„Çµ„Éû„É™„Éº:');
    console.log('========================');
    
    if (deployedContracts.length > 0) {
      deployedContracts.forEach((contract, index) => {
        console.log(`${index + 1}. ${contract.name}`);
        console.log(`   „Ç¢„Éâ„É¨„Çπ: ${contract.address}`);
        console.log(`   „Ç¨„Çπ‰ΩøÁî®: ${contract.gasUsed.toString()}`);
        console.log(`   „Éñ„É≠„ÉÉ„ÇØ: ${contract.blockNumber}`);
      });
      
      console.log('');
      console.log('üéØ „Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„Éà„É©„ÇØ„Éà„ÅåÊ≠£Â∏∏„Å´„Éá„Éó„É≠„Ç§„Åï„Çå„Åæ„Åó„Åü!');
      console.log('');
      console.log('üí° ‰ΩøÁî®ÊñπÊ≥ï:');
      console.log('   1. contracts/„ÅßSolidity„Ç≥„Éº„Éâ„ÇíÁ¢∫Ë™ç');
      console.log('   2. abi/„ÅßABI„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç');  
      console.log('   3. „Éá„Éó„É≠„Ç§„Åï„Çå„Åü„Ç¢„Éâ„É¨„Çπ„ÅßÁõ∏‰∫í‰ΩúÁî®');
    } else {
      console.log('‚ùå „Éá„Éó„É≠„Ç§„Åï„Çå„Åü„Ç≥„É≥„Éà„É©„ÇØ„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
    }

  } catch (error) {
    console.error('‚ùå „Éá„Éó„É≠„Ç§„ÉÜ„Çπ„Éà‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error.message);
  }
}

// „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
if (require.main === module) {
  deployFromOrganizedStructure()
    .then(() => {
      console.log('\nüéØ ÁµÑÁπîÂåñ„Éá„Éó„É≠„Ç§„ÉÜ„Çπ„ÉàÂÆå‰∫Ü!');
    })
    .catch((error) => {
      console.error('‚ùå Ëá¥ÂëΩÁöÑ„Ç®„É©„Éº:', error);
      process.exit(1);
    });
}

module.exports = { deployFromOrganizedStructure };